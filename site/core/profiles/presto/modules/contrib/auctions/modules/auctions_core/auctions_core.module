<?php

/**
 * @file
 * Contains auctions_core.module.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function auctions_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the auctions_core module.
    case 'help.page.auctions_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Auctions Core Entities.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function auctions_core_theme($existing, $type, $theme, $path) {
  return [
    'auction_time' => [
      'variables' => [
        'datetime' => NULL,
        'formatted' => NULL,
        'unix' => NULL,
        'font_size' => 20,
      ],
    ],
  ];
}

/**
 * Auciton Item & Bid entity creation 'allowed_values_function'.
 */
function auctions_core_activeCurrencyList(BaseFieldDefinition $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $currencyList = ['USD' => 'United States Dollar'];
  // If is in install phase, config service will not be availible, thus use one simple item.
  $auctionsSettings = \Drupal::service('config.factory')->getEditable('auctions.item_settings');
  if ($auctionsSettings) {
    $currencyList = \Drupal::service('auctions_core.tools')->getActiveItemCurrencies();
  }
  return $currencyList;
}

/**
 *
 */
function auctions_core_activeCurrencyListDefault() {
  return 'USD';
}

/**
 * Implements hook_cron().  Change item status as per daterange.
 */
function auctions_core_cron() {
  $now = new DrupalDateTime('now');
  $datestamp = (string) $now->format('Y-m-d\TH:i:s');
  $isStartDayList = auctions_core_listNew($datestamp);
  if ($isStartDayList) {
    foreach ($isStartDayList as $rev => $id) {
      $queue = \Drupal::queue('auction_item_workflow');
      $item = (object) ['id' => $id, 'workflow' => 1];
      $queue->createItem($item);
    }
  }

  $isEndDayList = auctions_core_listActive($datestamp);
  if ($isEndDayList) {
    foreach ($isEndDayList as $rev => $id) {
      $queue = \Drupal::queue('auction_item_workflow');
      $item = (object) ['id' => $id, 'workflow' => 3];
      $queue->createItem($item);
    }
  }

}

/**
 * Get all action items that are currently active.
 */
function auctions_core_listActive($datestamp) {
  $auctionItem = \Drupal::entityTypeManager()->getStorage('auction_item')->getQuery();
  $auctionItem->condition('date.end_value', $datestamp, '<');
  $auctionItem->condition('workflow', [1], 'IN');
  return $auctionItem->execute();
}

/**
 * Get all auction items that to start..
 */
function auctions_core_listNew($datestamp) {
  $auctionItem = \Drupal::entityTypeManager()->getStorage('auction_item')->getQuery();
  $auctionItem->condition('date.value', $datestamp, '<=');
  $auctionItem->condition('workflow', [0, 2], 'IN');
  return $auctionItem->execute();
}

/**
 * Implements hook_entity_type_build().
 *
 *  Add validation of to Auction Entities.
 */
function auctions_core_entity_type_build(array &$entity_types) {
  // Attach validation to the Highest Bidder to Bid Entitities.
  $entity_types['auction_bid']->addConstraint('CurbBids');
  $entity_types['auction_item']->addConstraint('CurbItems');
}

/**
 * Implements hook_entity_operation().
 *
 * Add 'relist' to admin operation lists.
 */
function auctions_core_entity_operation(EntityInterface $entity) {
  if (in_array($entity->bundle(), ['auction_item'])) {
    $operations = [];
    $operations['relist'] = [
      'title' => t('Relist'),
      'url' => Url::fromRoute('entity.auction_item.relist_form', ["auction_item" => $entity->id()]),
      'weight' => 150,
    ];
    return $operations;
  }
}

/**
 * Uses 'auctions_core.tools' Service get bids grouped by user..
 *
 * @return false|array
 */
function auctions_core_tools() {
  return \Drupal::service('auctions_core.tools');
}
